# -*- coding: utf-8 -*-
"""Exportpython-to-tensorflow.js.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10DwrBZFn5DFcOV_gLOwq6JrPhLshyHww
"""



import tensorflow as tf
import numpy as np

celsius = np.array([-40, -10, 0, 8, 15, 22, 38], dtype=float)
fahrenheit = np.array([-40, 14, 32, 46, 59, 72, 100], dtype=float)

#capa = tf.keras.layers.Dense(units=1, input_shape=[1])
#modelo = tf.keras.Sequential([capa])

oculta1 = tf.keras.layers.Dense(units=3, input_shape=[1])
oculta2 = tf.keras.layers.Dense(units=3)
salida = tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([oculta1, oculta2, salida])

capa = tf.keras.layers.Dense(units=1, input_shape=[1])
modelo = tf.keras.Sequential([capa])

modelo.compile(
    optimizer=tf.keras.optimizers.Adam(0.1),
    loss='mean_squared_error'
)

print("comenzando entrenamiento....")
historial = modelo.fit(celsius, fahrenheit, epochs=1000, verbose=False)
print("modelo entrenado!")

import matplotlib.pyplot as plt
plt.xlabel("# Epoca")
plt.ylabel("magnitud de perdida")
plt.plot(historial.history["loss"])

print("Hagamos una prediccion!")
resultado = modelo.predict([100.0])
print("El resultado es " + str(resultado) + " fahrenheit!")

print("variables internas del modelo")
print(capa.get_weights())

#Exportar el modelo en formato h5
modelo.save('celsius_a_fahrenheit.h5')

#El equipo es linux. listemos el contenido de la carpeta actual para ver que se exporto el modelo
!ls

#para convertirlo a tensorflow.js, primero debemos instalar la libreria
!pip install tensorflowjs

#creando una carpeta donde se colocara los archivos resultantes
!mkdir carpeta_salida

#Realizar la exportacion a la carpeta de salida
!tensorflowjs_converter --input_format keras celsius_a_fahrenheit.h5 carpeta_salida

#confirmar que en la carpeta de salida se hayan generado los archivos ("bin" y "jason")
!ls carpeta_salida